-----BUILDING SECURE COMPUTER SYSTEMS-----
----------PROJECT 1 - SPLOIT 3------------

This sploit exploits the vulnerability of the snprintf function in function
foo, line 8. The vulnerability makes use of the special %n format specifier,
that stores the number of bytes written up to that point in the specified
variable. For instance:
	
	snprintf("abcd%n", &x);

Stores the number of bytes written up to the %n (4) into variable x. This
behaviour can be exploited because, if no parameter is specified after the
format string, the "next argument" pointer will keep going up in the stack
(toward higher addresses), thinking that what it points to is actually a
parameter for the function.
This basically means that a bunch of "%x" in the format string with no argument
allows us to see the content of the stack. To exploit this behaviour we proceeded 
in this way:

- first, we determined the distance of buf from snprintf first argument: to do
  this we ran the sploit with the following format string:
  "ZZZZ%x%x%x%x%x%x%x%x". This basically printed "ZZZZ" to buf, and then the
  sequence of %x forced snprintf to start dump the stack. At some point, since
  buf is for sure located above the snprintf seip (being a local variable to
  foo), we will start seeing a repeated pattern to stdout. This means that the
  next argument pointer has reached buf, and so we computed the distance of it
  from snprintf (each %x takes a word from stack and prints it). In our case
  such distance was 2 (we started seeing the repeated path after 2 words were
  damped);
- now, our goal was to overwrite the return address of foo even though
  snprintf would not allow it (performing control on the number of written
  bytes, thus defending from a normal buffer ovwerflow). To do this, we will
  place a bunch of %n in our format string, in order to write a number of data
  corresponding to each byte of the return address we wanted (where we store
  the shellcode, as usual);
- to do this, we exploited the little code snippet found in the paper proposed
  to us, that computed the offsets given the address we wanted to reach:
  
  int add[4];
  sum = 0x41; //length of already written character before reaching buf,
  	      //obtained observing the repetition of some pattern in the stack 
  int written = 0;

  for(i = 0; i<4; i++){

 	sscanf(argv[i+1], "%02x", &add[i]);
	written += (i == 0) ? sum : padding;
	mod_written = written % 0x100;

	padding = (a[i]-mod_written) % 0x100;

	if(padding < 10)
		padding += 0x100;

	printf("%d\n", padding);

  }
  
  This division of the final address in 4 bytes is due to the fact that an hex
  address written in decimal corresponds to a huge number, and snprintf won't accept
  formatting specifiers like "%99999999999x". We used the fact that a series
  of %n actually sums up the already written characters, and in particular the %hhn
  format specifier that actually allowed us to only write the lsb of the
  number of written bytes.

  Finally, our format string included the shellcode, so that it looked like:

  <initial %<n>x>
  <address><padding>
  <address+1><padding>
  <address+2><padding>
  <address+3>
  %203x%hhn%240x%hhn%259x%hhn%191x%hhn

