-----BUILDING SECURE COMPUTER SYSTEMS-----
----------PROJECT 1 - SPLOIT 2 -----------

This sploit exploits the vulnerability that target2 has at line 19. Indeed,
count is an int variable whose value is obtained through the strtoul function
in main, which is compard to the unsigned MAX_WIDGETS. 
For this reason, exploiting an integer overflow of "2nd" and "3rd" type
(arithmetic and signedness bugs) allows us to bypass the if statement in foo
function at line 19. The bug is exploited as follows:
- our sploit send as command line arguments to target the number -2147483547,
  a comma and the shellcode; 
- this number is chosen because its hex representation is 0x80000065. What
  happens is that  at line 19, count is seen as a negative number (using 2's
  complement representation, every number whose first bit is 1 is considered
  negative, so the first byte could have started with every figure from 8 to
  f);
- this makes the comparison at line 19 true, cause every negative number is
  less than MAX_WIDGETS.

Now, the integer overflow allows us to copy into buf a number of bytes way
larger than MAX_WIDGETS, because the multiplication count*sizeof(struct
widget) basically shifts the first 5 bits of count by 5 positions left. This
is due to the fact that sizeof(struct widget) = 32 = 2^5, and we know that
multiplying by a power of 2 means shifting left the other operand by a number
of bits equal to the exponent. This implies that the 4 bits after the MSB of
count could actually have been whatever number, cause they are thrown away.
In this way, the integer vulnerability made us exploits a standard buffer
overflow, cause at this point buf can be written with a bigger set of data,
and we can again overwrite the return address with the address of our
shellcode (passed as command line parameter) stored in buf.
This justifies the chosen initial number: we needed more than
MAX_WIDGETS*sizeof(struct widget) bytes to write until the foo return address,
and actually it turned out that 101*sizeof(struct widget) was enough. 101 in
hex is 0x65, and so we completed our number that allowed us to perform first
an integer and then a buffer overflow.

As in sploit1, we used gdb to determine the address difference between seip
and buf, to determine where to start writing the address of our shellcode
passed from command line. Our arg1 size had to account for the additional
bytes of the count variable and the comma, so that our final arg1 looked like:

  _________________________________________________________________________
 |	      |	      |			 |		        |     |	   |
 |-2147483547,|shellc | dummy characters | &buf[0] = 0xbeffe488 |dummy| \0 |
 |____________|_______|__________________|______________________|_____|____|
 0	    11 12   48 49            3215 3216		     3219      3243			
